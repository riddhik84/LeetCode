/*
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]

Output:
[2,3]
*/


class Solution {
    //from Solution
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();

        //Step1: convert all numbers into -1 whose index is found.
        //Those numbers which are twice will turn -ve and then again +ve
        //Those numbers whose index do not present because some nums are dups, will stay +ve
        for (int num : nums) {
            nums[Math.abs(num) - 1] *= -1;
        }
        
        //System.out.println(Arrays.toString(nums));

        //Step2: loop again for indexes
        //Those numbers whose index is found and is not negative, are the onces which are double.
        for (int num : nums) {
            if (nums[Math.abs(num) - 1] > 0) {
                ans.add(Math.abs(num));
                nums[Math.abs(num) - 1] *= -1;
            }
        }

        return ans;
    }
}
